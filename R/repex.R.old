# Make short reproducable examples of regression commands

example = function() {
  project.dir = "~/repbox/projects_reg/testsupp"
  library(repboxMain)


  make.project.repex.cands(project.dir)
  rx.df = readRDS(file.path(project.dir,"repbox","repex","repex_cand.Rds"))
  rx = rx.df[1,]
  rx$r.mod.cmd.df
  repex.make.data.script.r(rx, project.dir)
}


make.project.repex.cands = function(project.dir) {
  restore.point("make.project.repex.cands")
  su = readRDS(file.path(project.dir,"repbox/stata/repbox_results.Rds"))

  re.df = su$run.err.df
  reg.lines = which(re.df$is.regcmd)

  repex.df = lapply(reg.lines, make.reg.repex, su=su) %>% bind_rows()

  repex.dir = file.path(project.dir,"repbox/repex")
  if (!dir.exists(repex.dir)) dir.create(repex.dir)
  saveRDS(repex.df, file.path(repex.dir, "repex_cand.Rds"))
  invisible(repex.df)
}

make.reg.repex = function(reg.line, su, re.df = su$run.err.df) {
  restore.point("make.reg.repex")
  re.df = re.df[1:reg.line,]
  start.line = max(which(re.df$data.cmd.type=="new"))
  re.df = re.df[start.line:NROW(re.df),]
  use.stata.cmds = c("gen","g","replace","keep","drop","generate")
  mod.lines = which(re.df$cmd %in% use.stata.cmds)


  stata.mod.cmd.df = re.df[mod.lines, c("cmdline","cmd","runsec","runerr")]
  r.mod.cmd.df = repex.mod.code.stata.to.r(stata.mod.cmd.df)

  project.dir = su$dotab$project.dir[[1]]
  project = su$dotab$project[[1]]
  data.path = as.path.in.project.dir(re.df$foundfile[[1]],re.df$wdir[[1]], project.dir)

  data.org.path = file.path(project.dir,"org", data.path)
  data.in.org = file.exists(data.org.path)

  data.mod.path = file.path(project.dir,"mod", data.path)
  data.in.mod = file.exists(data.mod.path)

  if (data.in.org) {
    data.mb = file.size(data.org.path) / 1e6
  } else if (data.in.mod) {
    data.mb = file.size(data.mod.path) / 1e6
  } else {
    data.mb = NA
  }

  repex = re.df[NROW(re.df),]

  # relative to project.dir
  dotab = su$dotab
  do = dotab[dotab$doid == repex$doid,]

  code.file = as.path.in.project.dir(do$file, project.dir=project.dir)


  regres = semi_join(su$regres, repex, by=c("line","counter","doid"))

  su$regres

  res = as_tibble(list(project=project, lang="stata", tested = FALSE, works = NA, code.file.id = do$donum, line=repex$line, counter=repex$counter, code.file=code.file, data.path = data.path, data.mb=data.mb, data.in.org = data.in.org, data.in.mod = data.in.mod, cmd = repex$cmd, cmdline = repex$cmdline, stata.mod.cmd.df=list(stata.mod.cmd.df), r.mod.cmd.df = r.mod.cmd.df, reg.tab = regres$ct[1], reg.stat = regres$er[1],  out.txt=repex$out.txt, load.sec = re.df$runsec[[1]], mod.sec = sum(stata.mod.cmd.df$runsec,na.rm=TRUE), reg.sec = repex$runsec), runsec = load.sec+mod.sec+reg.sec)
}

repex.mod.code.stata.to.r = function(cmd.df) {
  restore.point("repex.mod.code.stata.to.r")
  txt = cmd.df$cmdline
  s = repbox.normalize.do(txt)
  res = repbox.do.table(s)
  tab = res$tab
  tab$code = txt
  pho = res$ph.df

  r.code = lapply(seq_len(NROW(tab)), function(i) {
    ri = stata2r(tab=tab[i,],pho=pho, add.comment=FALSE)
  })

  r.cmd.df = tibble(rcmd = unlist(r.code), runerr=NA, runsec=NA_real_)
  r.cmd.df
}


repex.make.data.script.r = function(rx, project.dir, out.ext = c("dta"), data.path = NULL, out.dir = file.path(project.dir,"repbox/repex/work"), ...) {
  restore.point("repex.make.data.script.r")
  if (is.null(data.path)) {
    if (rx$data.in.org) {
      data.path = file.path(project.dir, "org", rx$data.path)
    } else if (rx$data.in.mod) {
      data.path = file.path(project.dir, "mod", rx$data.path)
    } else {
      return(list(ok=FALSE, msg="Data set not found in org and mod."))
    }
  }
  if (!file.exists(data.path)) {
    return(list(ok=FALSE, msg=paste0("Data set ", data.path, " does not exists.")))
  }

  if (!dir.exists(out.dir)) dir.create(out.dir)
  load.code = paste0('
library("repboxStata")
dat = repbox.load.data("', data.path,'")
')
  mod.code = rx$r.mod.cmd.df$rcmd
  save.code = paste0('rio::export(dat,"', out.dir,"/regdat.",out.ext,'")')

  code = merge.lines(c(load.code, mod.code,save.code))
  writeLines(code, file.path(out.dir,"make_data.r"))
  invisible(code)
}

repex.analyse.do.script = function(rx,project.dir, pre.cmd=NULL, post.cmd = 'estout . using "reg_results.tsv", cells("b se t p ci_l ci_u") replace',out.dir = file.path(project.dir,"repbox/repex/work") ) {
  restore.point("repex.analyse.do.script")

  code = paste0('
use "regdat.dta"

', pre.cmd,'
',rx$cmdline, '
', post.cmd, '
'
  )
  writeLines(code, file.path(out.dir, "analyse.do"))

}

repbox.load.data = function(data.path = NULL, write.cache=TRUE) {
  cache.path = getOption("repbox.repex.cache.path")
  if (identical(cache.path,data.path)) {
    dat = getOption("repbox.repex.data")
    return(dat)
  }
  dat = rio::import(data.path)
  if (write.cache) set.repex.data.cache(data.path, dat)
  return(dat)
}

set.repex.data.cache = function(data.path, dat) {
  options(repbox.repex.cache.path = data.path)
  options(repbox.repex.data = dat)
}


clear.repex.data.cache = function() {
  options(repbox.repex.cache.path = NULL)
  options(repbox.repex.data = NULL)
}
